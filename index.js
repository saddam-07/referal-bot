const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
require('dotenv').config();

// Bot configuration
const token = process.env.BOT_TOKEN;
const secToken = process.env.BOT_SECOND_TOKEN
const adminId = process.env.ADMIN_ID
const bot = new TelegramBot(token, { polling: true });
const bot2 = new TelegramBot(secToken, { polling: true });

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Initialize database tables
async function initializeDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        balance NUMERIC DEFAULT 0,
        referrer_id BIGINT,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS stats (
        id SERIAL PRIMARY KEY,
        total_users INTEGER DEFAULT 0,
        today_users INTEGER DEFAULT 0,
        total_paid NUMERIC DEFAULT 0,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS payment_requests (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        amount NUMERIC,
        status TEXT DEFAULT 'pending',
        request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
      );
      
      CREATE TABLE IF NOT EXISTS channels (
        id SERIAL PRIMARY KEY,
        channel_id TEXT NOT NULL,
        channel_name TEXT NOT NULL
      );
    `);
    
    // Initialize stats if not exists
    const statsCheck = await pool.query('SELECT * FROM stats');
    if (statsCheck.rows.length === 0) {
      await pool.query('INSERT INTO stats DEFAULT VALUES');
    }
    
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Database initialization error:', error);
  }
}

// Required channels to subscribe
const requiredChannels = [
  { id: '@refproverk', name: '–ö–∞–Ω–∞–ª 1', url: 'https://t.me/refproverk' },
  { id: '@refproverk', name: '–ö–∞–Ω–∞–ª 2', url: 'https://t.me/refproverk' },
];

// Main menu inline keyboard
const mainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üíª –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
        { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'statistics' }
      ],
      [{ text: 'üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data: 'functionality' }]
    ]
  }
};

// Functionality menu inline keyboard
const functionalityKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üìö –ú–∞–Ω—É–∞–ª—ã', callback_data: 'manuals' }],
      [{ text: '‚≠ê –û—Ç–∑—ã–≤—ã', callback_data: 'reviews' }],
      [{ text: '‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'required_subscriptions' }],
      [{ text: 'üí∞ –í—ã–ø–ª–∞—Ç—ã', callback_data: 'payments' }],
      [{ text: '‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º', url: 'https://t.me/Mr_SnAyPeR' }],
      [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referrals' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main' }]
    ]
  }
};

// Back button
const backButton = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  }
};

// Check if user is registered
async function isUserRegistered(userId) {
  const result = await pool.query('SELECT * FROM users WHERE user_id = $1', [userId]);
  return result.rows.length > 0;
}

// Register new user
async function registerUser(userId, username, referrerId = null) {
  try {
    await pool.query(
      'INSERT INTO users (user_id, username, referrer_id) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING',
      [userId, username, referrerId]
    );
    
    // Update stats
    await pool.query('UPDATE stats SET total_users = total_users + 1, today_users = today_users + 1');
    
    // Add bonus to referrer if exists
    if (referrerId) {
      await pool.query('UPDATE users SET balance = balance + 0.5 WHERE user_id = $1', [referrerId]);
    }
  } catch (error) {
    console.error('Error registering user:', error);
  }
}

// Check subscriptions to required channels
async function checkSubscriptions(userId) {
  for (const channel of requiredChannels) {
    try {
      const chatMember = await bot.getChatMember(channel.id, userId);
      if (chatMember.status === 'left' || chatMember.status === 'kicked' || chatMember.status === 'banned') {
        return false;
      }
    } catch (error) {
      console.error(`Error checking subscription for channel ${channel.id}:`, error.message);
      return false;
    }
  }
  return true;
}

// Get user profile
async function getUserProfile(userId) {
  try {
    const userResult = await pool.query('SELECT * FROM users WHERE user_id = $1', [userId]);
    if (userResult.rows.length === 0) {
      return null;
    }
    
    const user = userResult.rows[0];
    
    // Count referrals
    const referralsResult = await pool.query('SELECT COUNT(*) FROM users WHERE referrer_id = $1', [userId]);
    const referralsCount = parseInt(referralsResult.rows[0].count);
    
    return {
      userId: user.user_id,
      username: user.username,
      balance: parseFloat(user.balance),
      referralsCount,
      referrerId: user.referrer_id
    };
  } catch (error) {
    console.error('Error getting user profile:', error);
    return null;
  }
}

// Get referral info
async function getReferralInfo(userId) {
  try {
    // Count all referrals
    const referralsResult = await pool.query('SELECT COUNT(*) FROM users WHERE referrer_id = $1', [userId]);
    const referralsCount = parseInt(referralsResult.rows[0].count);
    
    // Calculate earnings from referrals
    const earningsResult = await pool.query(`
      SELECT SUM(balance) as total_earnings
      FROM users
      WHERE referrer_id = $1
    `, [userId]);
    
    const totalEarnings = parseFloat(earningsResult.rows[0].total_earnings || 0);
    
    return {
      referralsCount,
      totalEarnings
    };
  } catch (error) {
    console.error('Error getting referral info:', error);
    return { referralsCount: 0, totalEarnings: 0 };
  }
}

// Get bot statistics
async function getBotStats() {
  try {
    const statsResult = await pool.query('SELECT * FROM stats');
    return statsResult.rows[0];
  } catch (error) {
    console.error('Error getting bot stats:', error);
    return null;
  }
}

// Admin commands to manage users
async function resetUserReferrals(userId) {
  try {
    await pool.query('UPDATE users SET referrer_id = NULL WHERE referrer_id = $1', [userId]);
    return true;
  } catch (error) {
    console.error('Error resetting user referrals:', error);
    return false;
  }
}

async function resetUserBalance(userId) {
  try {
    await pool.query('UPDATE users SET balance = 0 WHERE user_id = $1', [userId]);
    return true;
  } catch (error) {
    console.error('Error resetting user balance:', error);
    return false;
  }
}

// Generate subscription buttons
function getSubscriptionButtons() {
  return {
    reply_markup: {
      inline_keyboard: [
        ...requiredChannels.map(channel => [{ text: `üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}`, url: channel.url }]),
        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subs' }]
      ]
    }
  };
}

// Handle start command
bot.onText(/\/start(?:\s+(\d+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || 'NoUsername';
  const referrerId = match && match[1] ? parseInt(match[1]) : null;
  
  const isRegistered = await isUserRegistered(userId);
  
  if (!isRegistered) {
    await registerUser(userId, username, referrerId);
  }
  
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await bot.sendPhoto(chatId, './image.png', {
    caption: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå!\n\n‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
    parse_mode: 'HTML',
    ...getSubscriptionButtons()
  });
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  // Check subscription callback
  if (data === 'check_subs') {
    const subscribed = await checkSubscriptions(userId);
    
    if (subscribed) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã! ‚úÖ' });
      
      const profile = await getUserProfile(userId);
      let referrerMessage = '';
      
      if (profile && profile.referrerId) {
        referrerMessage = `\n\nüë• –í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${profile.referrerId}!`;
      }
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        await bot.sendPhoto(chatId, './image.png', {
          caption: `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.${referrerMessage}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:`,
          ...mainMenuKeyboard
        });
      } catch (error) {
        console.error('Error sending photo:', error);
        await bot.sendMessage(chatId, 
          `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.${referrerMessage}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:`,
          mainMenuKeyboard
        );
      }
    } else {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! ‚ùå' });
      
      await bot.sendMessage(chatId, 
        `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:`,
        getSubscriptionButtons()
      );
    }
    return;
  }
  
  // Check if user has subscriptions before processing any callback
  const subscribed = await checkSubscriptions(userId);
  if (!subscribed && data !== 'check_subs') {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!',
      show_alert: true
    });
    
    await bot.sendMessage(chatId, 
      `‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:`,
      getSubscriptionButtons()
    );
    return;
  }
  
  // Main menu callbacks
  switch (data) {
      case 'back_to_main':
        try {
          await bot.editMessageMedia(
            {
              type: 'photo',
              media: './image.png',
              caption: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå'
            },
            {
              chat_id: chatId,
              message_id: messageId,
              ...mainMenuKeyboard
            }
          );
        } catch (error) {
          console.error('Back button error:', error);
          // Fallback if edit fails
          await bot.sendPhoto(chatId, './image.png', {
            caption: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå',
            ...mainMenuKeyboard
          });
        }
        break;
      
    case 'profile':
      const profile = await getUserProfile(userId);
      if (!profile) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è! ‚ùå' });
        return;
      }
      
      await bot.sendPhoto(chatId, './image.png', {
        caption: `üíª‚Äî–ü—Ä–æ—Ñ–∏–ª—å\n‚î£üÜî –ú–æ–π Username: @${profile.username}\n‚î£üÜî –ú–æ–π ID: ${profile.userId}\n‚î£üí∞ –ë–∞–ª–∞–Ω—Å: ${profile.balance.toFixed(1)}üíµ\n‚îóüë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${profile.referralsCount}`,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', callback_data: 'referrals' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      break;
      
    case 'statistics':
      const stats = await getBotStats();
      if (!stats) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! ‚ùå' });
        return;
      }
      
      await bot.sendPhoto(chatId, './image.png', {
        caption: `ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå\nüìà‚Äî –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n‚î£–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: ${stats.total_users}\n‚î£–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –±–æ—Ç–∞ –∑–∞—à–ª–æ: ${stats.today_users}\n‚îó–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ${parseFloat(stats.total_paid).toFixed(1)}üíµ`,
        ...backButton
      });
      break;
      
      case 'functionality':
        await bot.sendPhoto(chatId, './image.png', {
          caption: 'üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
          ...functionalityKeyboard
        });
        break;
      
    case 'referrals':
      const referralInfo = await getReferralInfo(userId);
      
      await bot.sendPhoto(chatId, './image.png', {
        caption: `üë• ‚Äî –†–ï–§–ï–†–ê–õ–ö–ê\n\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/GalaxysTeamBot?start=${userId}\n\n–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralInfo.referralsCount}\n–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ —Å—Å—ã–ª–∫–∏: ${referralInfo.totalEarnings.toFixed(1)}üíµ`,
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: `copy_link:${userId}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
          ]
        }
      });
      break;
      
    case 'manuals':
      await bot.sendPhoto(chatId, './image.png', {
        caption: 'üìö –ú–∞–Ω—É–∞–ª—ã\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–Ω—É–∞–ª—ã –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É:',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìñ –û—Ç–∫—Ä—ã—Ç—å –º–∞–Ω—É–∞–ª—ã', url: 'https://t.me/c/2422397027/13' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'functionality' }]
          ]
        }
      });
      break;
      
    case 'reviews':
      await bot.sendPhoto(chatId, './image.png', {
        caption: '‚≠ê –û—Ç–∑—ã–≤—ã\n\n–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚≠ê –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', url: 'https://t.me/c/2422397027/12' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'functionality' }]
          ]
        }
      });
      break;
      
    case 'required_subscriptions':
      await bot.sendPhoto(chatId, './image.png', {
        caption: '‚ùó –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:',
        ...getSubscriptionButtons()
      });
      break;
      
      case 'payments':
        const userProfile = await getUserProfile(userId);
        if (!userProfile) {
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è! ‚ùå' });
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã (10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = 7$)
        const minWithdrawalAmount = 0.5;
        const refCount = await getReferralCount(userId);
        
        if (refCount < 1 || userProfile.balance < minWithdrawalAmount) {
          await bot.sendPhoto(chatId, './image.png', {
            caption: `üí∞ –í—ã–ø–ª–∞—Ç—ã\n\n‚ùóÔ∏è –î–ª—è –≤—ã–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º 10 —á–µ–ª–æ–≤–µ–∫ (—Å–µ–π—á–∞—Å: ${refCount}) –∏ –∏–º–µ—Ç—å –±–∞–ª–∞–Ω—Å –Ω–µ –º–µ–Ω–µ–µ 7$.\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userProfile.balance.toFixed(1)}üíµ`,
            ...backButton
          });
          return;
        }
        
        await bot.sendPhoto(chatId, './image.png', {
          caption: `üí∞ –ó–∞–∫–∞–∑ –≤—ã–ø–ª–∞—Ç—ã\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userProfile.balance.toFixed(1)}üíµ\n\n–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∏ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: 'request_payment' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'functionality' }]
            ]
          }
        });
        break;
      
        case 'request_payment':
          const paymentProfile = await getUserProfile(userId);
          const minAmount = 0;
          const referralCount = await getReferralCount(userId);
          
          if (!paymentProfile || paymentProfile.balance < minAmount || referralCount < 1) {
            await bot.answerCallbackQuery(callbackQuery.id, { 
              text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∏–ª–∏ –º–µ–Ω—å—à–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤! ‚ùå', 
              show_alert: true 
            });
            return;
          }
          
          // –ó–∞–ø—Ä–æ—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
          await bot.sendMessage(chatId, 
            `üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\nXXXX-XXXX-XXXX-XXXX`
          );
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã
          userStates[userId] = {
            awaitingCardInfo: true,
            amount: paymentProfile.balance
          };
          break;
      
    case (data.match(/^copy_link:(\d+)$/) || {}).input:
      const linkUserId = data.split(':')[1];
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: `–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: https://t.me/GalaxysTeamBot?start=${linkUserId}`,
        show_alert: true
      });
      break;
  }
  
  // Admin callbacks
  if (userId.toString() === adminId) {
    if (data === 'admin_stats') {
      const adminStats = await getBotStats();
      
      await bot2.sendMessage(chatId, 
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${adminStats.total_users}\n–ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${adminStats.today_users}\n–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: ${parseFloat(adminStats.total_paid).toFixed(1)}üíµ`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
            ]
          }
        }
      );
    }
    
    if (data.startsWith('approve_payment:')) {
      const targetUserId = data.split(':')[1];
      
      try {
        // Get payment amount and info
        const paymentResult = await pool.query(
          'SELECT amount, card_number FROM payment_requests WHERE user_id = $1 AND status = $2 ORDER BY request_date DESC LIMIT 1',
          [targetUserId, 'pending']
        );
        
        if (paymentResult.rows.length > 0) {
          const amount = parseFloat(paymentResult.rows[0].amount);
          
          // Update payment status
          await pool.query(
            'UPDATE payment_requests SET status = $1 WHERE user_id = $2 AND status = $3',
            ['approved', targetUserId, 'pending']
          );
          
          // Reset user balance
          await pool.query('UPDATE users SET balance = 0 WHERE user_id = $1', [targetUserId]);
          
          // Update total paid
          await pool.query('UPDATE stats SET total_paid = total_paid + $1', [amount]);
          
          // Notify user
          await bot.sendMessage(targetUserId, 
            `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ${amount.toFixed(1)}üíµ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!`
          );
          
          await bot2.sendMessage(chatId, `‚úÖ –í—ã–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${targetUserId} –Ω–∞ —Å—É–º–º—É ${amount.toFixed(1)}üíµ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞`);
        }
      } catch (error) {
        console.error('Error approving payment:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–ø–ª–∞—Ç—ã');
      }
    } else if (data.startsWith('reject_payment:')) {
      const targetUserId = data.split(':')[1];
      
      try {
        // Update payment status
        await pool.query(
          'UPDATE payment_requests SET status = $1 WHERE user_id = $2 AND status = $3',
          ['rejected', targetUserId, 'pending']
        );
        
        // Notify user
        await bot.sendMessage(targetUserId, 
          `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Mr_SnAyPeR`
        );
        
        await bot2.sendMessage(chatId, `‚ùå –í—ã–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${targetUserId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
      } catch (error) {
        console.error('Error rejecting payment:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã');
      }
    } else if (data.startsWith('clear_user_history:')) {
      const targetUserId = data.split(':')[1];
      
      try {
        // Reset user balance and referrals
        await pool.query('UPDATE users SET balance = 0 WHERE user_id = $1', [targetUserId]);
        await pool.query('UPDATE users SET referrer_id = NULL WHERE referrer_id = $1', [targetUserId]);
        await pool.query('UPDATE payment_requests SET status = $1 WHERE user_id = $2 AND status = $3',
          ['canceled', targetUserId, 'pending']
        );
        
        // Notify user
        await bot.sendMessage(targetUserId, 
          `‚ö†Ô∏è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤ –±–æ—Ç–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞—à –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å–±—Ä–æ—à–µ–Ω—ã.`
        );
        
        await bot2.sendMessage(chatId, `‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${targetUserId} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞`);
      } catch (error) {
        console.error('Error clearing user history:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    }
  }
});

// Admin commands
bot2.onText(/\/admin/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (userId.toString() !== adminId) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
  }
  
  return bot2.sendMessage(chatId, 
    `–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ùêÜùêÄùêãùêÄùêóùêò ùêìùêëùêÄùêÖùêÖùêàùêÇ | ùêìùêÑùêÄùêå\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', callback_data: 'admin_stats' }],
          [{ text: 'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏', callback_data: 'admin_balance' }],
          [{ text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏', callback_data: 'admin_referrals' }],
          [{ text: 'üí∏ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã', callback_data: 'admin_payments' }]
        ]
      }
    }
  );
});

// Reset user referrals command
bot2.onText(/\/reset_refs (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const targetUserId = match[1];
  
  if (userId.toString() !== adminId) {
    return bot2.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
  }
  
  const success = await resetUserReferrals(targetUserId);
  
  if (success) {
    return bot2.sendMessage(chatId, `–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${targetUserId} –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã`);
  } else {
    return bot2.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
  }
});

// Reset user balance command
bot2.onText(/\/reset_balance (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const targetUserId = match[1];
  
  if (userId.toString() !== adminId) {
    return bot2.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
  }
  
  const success = await resetUserBalance(targetUserId);
  
  if (success) {
    return bot2.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${targetUserId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω`);
  } else {
    return bot2.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞');
  }
});


// –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
const userStates = {};

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–µ–º–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userStates[userId] && userStates[userId].awaitingCardInfo) {
    if (text && text.startsWith('')) {
      const cardNumber = text.replace('').trim();
      const amount = userStates[userId].amount;
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã
        await pool.query(
          'INSERT INTO payment_requests (user_id, amount, card_number, status) VALUES ($1, $2, $3, $4)',
          [userId, amount, cardNumber, 'pending']
        );
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[userId];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        const userInfo = await getUserProfile(userId);
        const referralsResult = await pool.query('SELECT user_id, username FROM users WHERE referrer_id = $1', [userId]);
        const referralsList = referralsResult.rows.map(ref => `- ID: ${ref.user_id}, @${ref.username}`).join('\n');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, 
          `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ${amount.toFixed(1)}üíµ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${maskCardNumber(cardNumber)}\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`,
          mainMenuKeyboard
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        await bot2.sendMessage(adminId, 
          `üí∏ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${userInfo.username} (ID: ${userInfo.userId})\n–°—É–º–º–∞: ${amount.toFixed(1)}üíµ\n–ö–∞—Ä—Ç–∞: ${cardNumber}\n\n–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–≤—Å–µ–≥–æ: ${userInfo.referralsCount}):\n${referralsList || '–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_payment:${userId}` },
                  { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_payment:${userId}` }
                ],
                [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: `clear_user_history:${userId}` }]
              ]
            }
          }
        );
      } catch (error) {
        console.error('Error creating payment request:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        delete userStates[userId];
      }
    } else {
      await bot.sendMessage(chatId, 
        `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–í—ã–ø–ª–∞—Ç–∞ XXXX-XXXX-XXXX-XXXX`
      );
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ...
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã)
function maskCardNumber(cardNumber) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
  const digits = cardNumber.replace(/\D/g, '');
  if (digits.length < 4) return '****';
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
  return '**** **** **** ' + digits.slice(-4);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function getReferralCount(userId) {
  try {
    const result = await pool.query('SELECT COUNT(*) FROM users WHERE referrer_id = $1', [userId]);
    return parseInt(result.rows[0].count);
  } catch (error) {
    console.error('Error getting referral count:', error);
    return 0;
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è card_number
async function initializeDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        balance NUMERIC DEFAULT 0,
        referrer_id BIGINT,
        join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS stats (
        id SERIAL PRIMARY KEY,
        total_users INTEGER DEFAULT 0,
        today_users INTEGER DEFAULT 0,
        total_paid NUMERIC DEFAULT 0,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS payment_requests (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        amount NUMERIC,
        card_number TEXT,
        status TEXT DEFAULT 'pending',
        request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(user_id)
      );
      
      CREATE TABLE IF NOT EXISTS channels (
        id SERIAL PRIMARY KEY,
        channel_id TEXT NOT NULL,
        channel_name TEXT NOT NULL
      );
      
      -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ card_number –≤ —Ç–∞–±–ª–∏—Ü–µ payment_requests
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT FROM information_schema.columns 
          WHERE table_name = 'payment_requests' AND column_name = 'card_number'
        ) THEN
          ALTER TABLE payment_requests ADD COLUMN card_number TEXT;
        END IF;
      END $$;
    `);
    
    // Initialize stats if not exists
    const statsCheck = await pool.query('SELECT * FROM stats');
    if (statsCheck.rows.length === 0) {
      await pool.query('INSERT INTO stats DEFAULT VALUES');
    }
    
    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Database initialization error:', error);
  }
}

// Reset daily stats at midnight
function resetDailyStats() {
  const now = new Date();
  if (now.getHours() === 0 && now.getMinutes() === 0) {
    pool.query('UPDATE stats SET today_users = 0');
    console.log('Daily stats reset');
  }
}

// Initialize bot
async function startBot() {
  try {
    // Initialize database
    await initializeDatabase();
    
    // Set up daily stats reset
    setInterval(resetDailyStats, 60 * 1000); // Check every minute
    
    console.log('Bot started successfully');
  } catch (error) {
    console.error('Error starting bot:', error);
  }
}

startBot();